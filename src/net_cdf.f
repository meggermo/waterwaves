      SUBROUTINE OPEN_CDF_FILE (FILE_NAME, CDF_ID)
      IMPLICIT NONE
      INCLUDE 'netcdf.inc'
      CHARACTER*(*) FILE_NAME
      INTEGER CDF_ID
C
      INTEGER CDF_ERR
C     OPEN AN EXISTING NET_CDF DATA FILE
      CDF_ERR = NF_OPEN (FILE_NAME, NF_WRITE, CDF_ID)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_ENDDEF (CDF_ID)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      RETURN
      END
      SUBROUTINE CREATE_CDF_FILES (PREFIX, NNW, NGP)
      IMPLICIT NONE
      INCLUDE 'knd_params.inc'
      INCLUDE 'cdf_params.inc'
      INCLUDE 'netcdf.inc'
      CHARACTER*(*) PREFIX
      INTEGER NNW
      INTEGER NGP (NNW)
C
      INTEGER INW, CDF, NGP_NW
      CHARACTER*(11) FILE_NAME
C
      DO INW = 1, NNW
         CDF = INW
         NGP_NW = NGP (INW)
         WRITE (FILE_NAME, '(A,A,I3.3,A)') PREFIX, '-', INW, '.ncf'
         CALL CREATE_CDF_FILE (FILE_NAME, NGP_NW, CDF)
         CDF_ID (INW) = CDF
      END DO
      RETURN
      END
      SUBROUTINE CREATE_CDF_FILE (FILE_NAME, NGP, CDF_ID)
      IMPLICIT NONE
      INCLUDE 'netcdf.inc'
      CHARACTER*(*) FILE_NAME
      INTEGER NGP
      INTEGER CDF_ID
C
      INTEGER CDF_ERR
      INTEGER DIM_ID (4)
      INTEGER VAR_ID (5)
C     CREATE A NEW NET_CDF DATA FILE
      PRINT *, 'Creating netCDF file ', FILE_NAME
      PRINT *, 'NGP = ', NGP
      PRINT *, 'CDF ID = ', CDF_ID
      CDF_ERR = NF_CREATE (FILE_NAME, NF_CLOBBER, CDF_ID)
      CALL CHECK_CDF_ERROR (CDF_ERR)
C     DIMENSION DEFINITIONS
      CDF_ERR = NF_DEF_DIM (CDF_ID, 'SPACE-COORD',  2, DIM_ID (1))
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_DEF_DIM (CDF_ID, 'SPACE-DERIV',  2, DIM_ID (2))
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_DEF_DIM (CDF_ID, 'NODE-INDEX', NGP, DIM_ID (3))
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_DEF_DIM (CDF_ID, 'TIME-COORD',   0, DIM_ID (4))
      CALL CHECK_CDF_ERROR (CDF_ERR)
C     VARIABLE DEFINITIONS
      CDF_ERR = NF_DEF_VAR
     &   (CDF_ID, 'GRID', NF_DOUBLE, 4, DIM_ID (1), VAR_ID (1))
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_DEF_VAR
     &   (CDF_ID, 'PHI', NF_DOUBLE, 3, DIM_ID (2), VAR_ID (2))
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_DEF_VAR
     &   (CDF_ID, 'PHN', NF_DOUBLE, 3, DIM_ID (2), VAR_ID (3))
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_DEF_VAR
     &   (CDF_ID, 'TIME', NF_DOUBLE, 1, DIM_ID (4), VAR_ID (4))
      CALL CHECK_CDF_ERROR (CDF_ERR)
C     ATTRIBUTE DEFINITIONS
      CDF_ERR = NF_PUT_ATT_TEXT
     &   (CDF_ID, VAR_ID (1), 'UNITS', 1, 'M')
      CDF_ERR = NF_PUT_ATT_TEXT
     &   (CDF_ID, VAR_ID (2), 'UNITS', 7, 'M^2/SEC')
      CDF_ERR = NF_PUT_ATT_TEXT
     &   (CDF_ID, VAR_ID (3), 'UNITS', 5, 'M/SEC')
      CDF_ERR = NF_PUT_ATT_TEXT
     &   (CDF_ID, VAR_ID (4), 'UNITS', 3, 'SEC')
      CDF_ERR = NF_ENDDEF (CDF_ID)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      RETURN
      END
      SUBROUTINE CLOSE_CDF_FILE (CDF_ID)
      IMPLICIT NONE
      INCLUDE 'netcdf.inc'
      INTEGER CDF_ID
C
      INTEGER CDF_ERR
      CDF_ERR = NF_CLOSE (CDF_ID)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      RETURN
      END
      SUBROUTINE APPEND_CDF_DATA (CDF_ID, T, X, PHI, PHN)
      IMPLICIT NONE
      INCLUDE 'netcdf.inc'
      INTEGER CDF_ID
      DOUBLE PRECISION T
      DOUBLE PRECISION X   (4, *)
      DOUBLE PRECISION PHI (2, *)
      DOUBLE PRECISION PHN (2, *)
C
      INTEGER DIM_ID
      INTEGER DIM_LEN   (4)
      INTEGER DIM_START (4)
      INTEGER VAR_ID
      INTEGER CDF_ERR
      DATA    DIM_START /1,1,1,1/
      DIM_LEN (1) = 2
      DIM_LEN (2) = 2
      CDF_ERR = NF_INQ_DIMID (CDF_ID, 'NODE-INDEX', DIM_ID)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_INQ_DIMLEN (CDF_ID, DIM_ID, DIM_LEN (3))
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_INQ_DIMID (CDF_ID, 'TIME-COORD', DIM_ID)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_INQ_DIMLEN (CDF_ID, DIM_ID, DIM_LEN (4))
      CALL CHECK_CDF_ERROR (CDF_ERR)
      DIM_START (4) = DIM_LEN (4) + 1
      DIM_LEN   (4) = 1
      WRITE (*, *) 'DIM_START:', DIM_START
      WRITE (*, *) 'DIM_LEN:  ', DIM_LEN
      CDF_ERR = NF_INQ_VARID (CDF_ID, 'GRID', VAR_ID)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_PUT_VARA_DOUBLE
     &           (CDF_ID, VAR_ID, DIM_START (1), DIM_LEN (1), X)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_INQ_VARID (CDF_ID, 'PHI', VAR_ID)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_PUT_VARA_DOUBLE
     &           (CDF_ID, VAR_ID, DIM_START (2), DIM_LEN (2), PHI)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_INQ_VARID (CDF_ID, 'PHN', VAR_ID)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_PUT_VARA_DOUBLE
     &           (CDF_ID, VAR_ID, DIM_START (2), DIM_LEN (2), PHN)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_INQ_VARID (CDF_ID, 'TIME', VAR_ID)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_PUT_VAR1_DOUBLE
     &           (CDF_ID, VAR_ID, DIM_START (4), T)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      RETURN
      END
      SUBROUTINE RETRIEVE_CDF_DATA (CDF_ID, T, X, PHI, PHN, I)
      IMPLICIT NONE
      INCLUDE 'netcdf.inc'
      INTEGER CDF_ID
      DOUBLE PRECISION T
      DOUBLE PRECISION X   (4, *)
      DOUBLE PRECISION PHI (2, *)
      DOUBLE PRECISION PHN (2, *)
      INTEGER I
C
      INTEGER DIM_ID
      INTEGER DIM_LEN   (4)
      INTEGER DIM_START (4)
      INTEGER VAR_ID
      INTEGER CDF_ERR
      DATA    DIM_START /1,1,1,1/
      DIM_LEN (1) = 2
      DIM_LEN (2) = 2
      CDF_ERR = NF_INQ_DIMID (CDF_ID, 'NODE-INDEX', DIM_ID)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_INQ_DIMLEN (CDF_ID, DIM_ID, DIM_LEN (3))
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_INQ_DIMID (CDF_ID, 'TIME-COORD', DIM_ID)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_INQ_DIMLEN (CDF_ID, DIM_ID, DIM_LEN (4))
      CALL CHECK_CDF_ERROR (CDF_ERR)
      IF (DIM_LEN (4) .LT. I) THEN
         STOP 'ERROR: NOT IN DATASET'
      END IF
      DIM_START (4) = I
      DIM_LEN   (4) = 1
      CDF_ERR = NF_INQ_VARID (CDF_ID, 'GRID', VAR_ID)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_GET_VARA_DOUBLE
     &           (CDF_ID, VAR_ID, DIM_START (1), DIM_LEN (1), X)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_INQ_VARID (CDF_ID, 'PHI', VAR_ID)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_GET_VARA_DOUBLE
     &           (CDF_ID, VAR_ID, DIM_START (2), DIM_LEN (2), PHI)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_INQ_VARID (CDF_ID, 'PHN', VAR_ID)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_GET_VARA_DOUBLE
     &           (CDF_ID, VAR_ID, DIM_START (2), DIM_LEN (2), PHI)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_INQ_VARID (CDF_ID, 'TIME', VAR_ID)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_GET_VAR1_DOUBLE
     &           (CDF_ID, VAR_ID, DIM_START (4), T)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      RETURN
      END
      SUBROUTINE CHECK_CDF_ERROR (CDF_ERR)
      IMPLICIT NONE
      INCLUDE 'netcdf.inc'
      INTEGER CDF_ERR
      IF (CDF_ERR .NE. NF_NOERR) THEN
         WRITE (*, *) 'ERROR:'
         WRITE (*, *) NF_STRERROR (CDF_ERR)
         STOP
      END IF
      RETURN
      END
      INTEGER FUNCTION NF_GET_NGP (CDF_ID)
      IMPLICIT NONE
      INCLUDE 'netcdf.inc'
      INTEGER CDF_ID
      INTEGER CDF_ERR
      INTEGER DIM_ID
      INTEGER DIM_LEN
      CDF_ERR = NF_INQ_DIMID (CDF_ID, 'NODE-INDEX', DIM_ID)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      CDF_ERR = NF_INQ_DIMLEN (CDF_ID, DIM_ID, DIM_LEN)
      CALL CHECK_CDF_ERROR (CDF_ERR)
      NF_GET_NGP = DIM_LEN
      RETURN
      END
